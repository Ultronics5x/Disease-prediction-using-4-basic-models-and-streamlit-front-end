# -*- coding: utf-8 -*-
#import necessary libraries
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import string
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from wordcloud import WordCloud
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier

# LETS MAKE A CASUAL FRONTEND
st.title("Disease Prediction Using Different Types of Machine Learning algorithms")

symp1 = st.text_input("Give your description of the medical issue", "Yellowing of skin and eyes, fatigue")
#read data
symp2 = "I noticed a sudden onset of high fever, along with a rash on my skin and severe pain behind my eyes."
default = [symp2,"i am having numbness in my hands and having headaches","I am feeling nauseaous and constipated","i have pain in my eyes and wanting to vomit"]
default.append(symp1)
default=tuple(default)
symp1 = st.selectbox("& Select for prediction Or choose from examples",default )
"""### This machine can predict from 1200 different records :"""
df = pd.read_csv("Symptom2Disease.csv")
df.drop("Unnamed: 0",inplace=True,axis=1)

df.info()

df.isnull().sum()

#for col in df.columns:
    #print(col,": ",df[col].unique(),"\n")

nltk.download('punkt')
nltk.download('stopwords')

#set of English stop words
stop_words = set(stopwords.words('english'))

def clean_text(sent):
    #remove punctuations
    sent = sent.translate(str.maketrans('','',string.punctuation)).strip()

    #remove stopwords
    stop_words = set(stopwords.words('english'))
    words = word_tokenize(sent)
    words = [word for word in words if word not in stop_words]

    return " ".join(words).lower()

# apply clean_text on text column of df
df["text"] = df["text"].apply(clean_text)

# create word cloud to vizualize frequent words in our dataset
all_text = " ".join(df["text"])
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_text)
wordcloud.to_file("wordcloud.png")
st.image("wordcloud.png", caption='Visualization of texual data')

#Split data into train and test set
X_train, X_test, y_train, y_test = train_test_split(df["text"], df["label"], test_size=0.2, random_state=42)

"""### Text Vectorization
Here we will use Term Frequency Inverse Document Frequence (TF-IDF) method to vectorize disease symptoms description.
"""

# use tfidf for text vectorization
tfidf_vectorizer = TfidfVectorizer(max_features=1500)

tfidf_train = tfidf_vectorizer.fit_transform(X_train).toarray()
tfidf_test = tfidf_vectorizer.transform(X_test).toarray()

"""Let's try our model on some real data examples."""

# some custom symptoms generated by Chat GPT
cust_symptoms = {
    'Psoriasis': ["I have itchy, scaly patches of skin that can be painful.", "My skin is red, inflamed, and covered in silvery scales."],
    'Varicose Veins': ["I've noticed swollen and twisted veins in my legs.", "My legs feel heavy and achy, and I have a throbbing or burning sensation."],
    'Typhoid': ["I have a high fever, abdominal pain, and a headache.", "I've experienced weakness, fatigue, and a loss of appetite."],
    'Chickenpox': ["I have itchy, red spots and blisters all over my body.", "I've had a fever and a general feeling of being unwell."],
    'Impetigo': ["I have red sores on my face that have turned into honey-colored crusts.", "I've experienced itching and oozing from these sores."],
    'Dengue': ["I've been feeling incredibly weak, with a high fever, severe headache, and excruciating joint and muscle pain.", "I noticed a sudden onset of high fever, along with a rash on my skin and severe pain behind my eyes."],
    'Fungal infection': ["I have red, itchy rashes on my skin or nails.", "My skin is peeling, cracking, or oozing, and my nails may become discolored or brittle."],
    'Common Cold': ["I have a runny or stuffy nose, coughing, sneezing, and a sore throat.", "I also feel tired, with a mild headache and a low-grade fever."],
    'Pneumonia': ["I've been coughing with yellow, green, or bloody mucus.", "I have a high fever, chills, and shortness of breath."],
    'Dimorphic Hemorrhoids': ["I have painful lumps around my anus.", "I've experienced bleeding during bowel movements and anal itching."],
    'Arthritis': ["I have joint pain, stiffness, and swelling.", "My joints are often red and warm to the touch."],
    'Acne': ["I'm getting frequent pimples, blackheads, and whiteheads.", "Sometimes I get big, red zits that hurt, and my skin is oily and easily irritated."],
    'Bronchial Asthma': ["I've been wheezing, coughing, and experiencing shortness of breath.", "My chest feels tight and I have difficulty breathing."],
    'Hypertension': ["I have high blood pressure, with no noticeable symptoms.", "Sometimes I get headaches and experience nosebleeds."],
    'Migraine': ["I have severe, throbbing headaches, often on one side of my head.", "I'm sensitive to light, sound, and sometimes experience nausea and vomiting."],
    'Cervical spondylosis': ["I have neck pain and stiffness, which can radiate to my shoulders and arms.", "I may also experience numbness or weakness in my extremities."],
    'Jaundice': ["I have yellowing of the skin and eyes.", "I've experienced fatigue, dark urine, and pale-colored stools."],
    'Malaria': ["I have recurring high fevers with chills and sweating.", "I experience fatigue, headache, and muscle aches."],
    'Urinary tract infection': ["I have a frequent urge to urinate, with a burning sensation.", "My urine is cloudy, dark, or has a strong odor."],
    'Allergy': ["I have sneezing, runny or stuffy nose, and itchy or watery eyes.", "I may also experience skin rashes or hives."],
    'Gastroesophageal reflux disease': ["I have heartburn, regurgitation of stomach acid, and a sour taste in my mouth.", "I may also experience chest pain or difficulty swallowing."],
    'Drug reaction': ["I've developed a rash, itching, or hives after taking a medication.", "I may also experience swelling of the face, lips, or tongue."],
    'Peptic ulcer disease': ["I have burning or gnawing abdominal pain, often between meals and at night.", "I may also experience bloating, burping, and nausea."],
    'Diabetes': ["I've been experiencing excessive thirst, frequent urination, and unexplained weight loss.", "I may also have blurred vision, fatigue, and slow-healing sores."],
}
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(tfidf_train, y_train)
predictions = knn.predict(tfidf_test)
def report(y_test,predictions):
    """Function to create classification report"""
    accuracy = accuracy_score(y_test, predictions)
    print(f'Accuracy: {accuracy:.2f}')
    print(classification_report(y_test, predictions))

report(y_test,predictions)

def make_pred(model,text):
    """Function to make prediction on single data instance"""
    text = clean_text(text)
    tfidf = tfidf_vectorizer.transform([text]).toarray()
    disease = model.predict(tfidf)

    return disease[0]

def custom_test(model):
    c = 0
    correct_count = 0
    for dis,symptoms in cust_symptoms.items():
        for symptom in symptoms:
            c += 1
            pred = make_pred(model,symptom)
            correct = pred.lower()==dis.lower()
            if correct: correct_count += 1
            print("Actual: ",dis,"\t Pred: ",pred,"--",correct)

    print("\nTotal: ",c,"\nCorrect: ",correct_count)

import torch
from torch import nn,optim
from torch.utils.data import DataLoader, TensorDataset

"""### Model Selection"""
models = ["KNN : K-Nearest Neighbours","SVM : Support Vector Machines","RFC : Random Forest Classifier","NN : Neural Networks"]
models=tuple(models)
selected_model = st.selectbox("Select a model to see the predictive power of each",models)

if selected_model==models[0]:
    '''### KNN '''
    # knn will be our first model
    st.write("PREDICTED:",make_pred(knn,symp1))
    accuracy = accuracy_score(y_test, predictions)
    st.write(f'Accuracy: {accuracy:.2f}')
    custom_test(knn)

if selected_model==models[1]:
        
    """### SVM"""
    svm = SVC(kernel = 'linear', C = 1).fit(tfidf_train, y_train)
    svm_pred = svm.predict(tfidf_test)
    report(y_test,svm_pred)
    st.write("PREDICTED:",make_pred(svm,symp1))
    accuracy = accuracy_score(y_test, svm_pred)
    st.write(f'Accuracy: {accuracy:.2f}')
    custom_test(svm)

if selected_model==models[2]:

    """### Random Forest"""
    svm = SVC(kernel = 'linear', C = 1).fit(tfidf_train, y_train)
    svm_pred = svm.predict(tfidf_test)
    rfc = RandomForestClassifier(n_estimators = 100)
    rfc.fit(tfidf_train,y_train)
    report(y_test,svm_pred)
    st.write("PREDICTED:",make_pred(rfc,symp1))
    accuracy = accuracy_score(y_test,svm_pred)
    st.write(f'Accuracy: {accuracy:.2f}')
    custom_test(rfc)

if selected_model==models[3]:
    """## Neural Networks"""
    class ANN(nn.Module):
        def __init__(self, input_dim, output_dim):
            super(ANN, self).__init__()
            self.fc1 = nn.Linear(input_dim, 512)
            self.fc2 = nn.Linear(512, 256)
            self.fc3 = nn.Linear(256, output_dim)


        def forward(self, x):
            x = self.fc1(x)
            x = self.fc2(x)

            return self.fc3(x)

    input_dim = tfidf_train.shape[1]
    out_dim = 24

    ann = ANN(input_dim,out_dim)

    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(ann.parameters(), lr=0.001)

    diseases = df["label"].unique()

    idx2dis = {k:v for k,v in enumerate(diseases)}
    dis2idx = {v:k for k,v in idx2dis.items()}

    y_train_int = y_train.apply(lambda x: dis2idx[x]).values
    y_test_int = y_test.apply(lambda x: dis2idx[x]).values

    X_train_tensor = torch.tensor(tfidf_train,dtype=torch.float32)
    y_train_tensor = torch.tensor(y_train_int)

    X_test_tensor = torch.tensor(tfidf_test,dtype=torch.float32)
    y_test_tensor = torch.tensor(y_test_int)

    train_dataset = TensorDataset(X_train_tensor,y_train_tensor)

    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)

    epochs = 12
    for epoch in range(epochs):
        running_loss = 0.0
        for i, data in enumerate(train_loader, 0):
            inputs,labels = data
            print(inputs.shape,inputs.dtype)
            optimizer.zero_grad()
            outputs = ann(inputs)
            loss = criterion(outputs, labels)
            loss.backward().
            optimizer.step()
            running_loss += loss.item()

    text = clean_text(symp1)
    tfidf = tfidf_vectorizer.transform([text]).toarray()

    pred = ann(torch.tensor(tfidf,dtype=torch.float32))
    st.write("PREDICTED :",idx2dis[pred.argmax().item()])
    pred_ann = ann(X_test_tensor).argmax(dim=1)
    accuracy = accuracy_score(y_test_int,pred_ann.detach().numpy())
    st.write(f'Accuracy: {accuracy:.2f}')
    
    report(y_test_int,pred_ann.detach().numpy())

    def custom_test4():
        c = 0
        correct_count = 0

        for dis,symptoms in cust_symptoms.items():
            for symptom in symptoms:
                c += 1
                symptom = clean_text(symptom)
                tfidf = tfidf_vectorizer.transform([symptom]).toarray()
                pred = ann(torch.tensor(tfidf,dtype=torch.float32))
                pred_txt = idx2dis[pred.argmax().item()]
                correct = pred_txt.lower()==dis.lower()
                if correct: correct_count += 1
                print("Actual: ",dis,"\t Pred: ",pred_txt,"--",correct)

        print("\nTotal: ",c,"\nCorrect: ",correct_count)

    custom_test4()

    words = df["text"].str.split().apply(len)
    print("Average words: ",int(words.mean()))
    print("Max words: ",int(words.max()))